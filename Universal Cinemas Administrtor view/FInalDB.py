#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 11, 2018 09:35:09 AM

import sys
import InsertQuries as iq
import Destroy as d
import Employee as e
import Theater as t
import Cast as c
import Customer as m

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import FInalDB_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    
    top = Administrator_View (root)
    FInalDB_support.init(root, top)
    root.mainloop()

w = None
def create_Administrator_View(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Administrator_View (w)
    FInalDB_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Administrator_View():
    global w
    w.destroy()
    w = None


class Administrator_View:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
            
        ment = StringVar()
        
            
            
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1920x1001+2+86")
        top.title("Administrator View")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=0.2, relwidth=1.0)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#161668")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=1915)
        

        self.logo = Label(self.Frame1)
        self.logo.place(relx=0.03, rely=0.01, height=196, width=196)
        self.logo.configure(background="#161668")
        self.logo.configure(disabledforeground="#a3a3a3")
        self.logo.configure(foreground="#000000")
        self._img1 = PhotoImage(file="C:\\Users\\SFAdr\\Desktop\\android-chrome-192x192.png")
        self.logo.configure(image=self._img1)
        self.logo.configure(text='''Label''')
        
        def distruction():
            
            frm = d.Destroy.dis(self.Frame2)
            
            
             
            
            return
        
        
        self.Button1 = Button(self.Frame1)
        self.Button1.place(relx=0.48, rely=0.54, height=33, width=116)
        self.Button1.configure(activebackground="#161668")
        self.Button1.configure(activeforeground="white")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#161668")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(takefocus="0")
        self.Button1.configure(text='''Movies''')
        self.Button1.configure(command = distruction)
         
        def openTicket():
            d.Destroy.openTicket()
            return
         

        self.Button2 = Button(self.Frame1)
        self.Button2.place(relx=0.55, rely=0.54, height=33, width=116)
        self.Button2.configure(activebackground="#ffffff")
        self.Button2.configure(activeforeground="#ffffff")
        self.Button2.configure(background="#161668")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#f0fff9")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(takefocus="0")
        self.Button2.configure(text='''Tickets''')
        self.Button2.configure(command = openTicket)

        def openTheater():
            t.vp_start_gui()
            

        self.Button3 = Button(self.Frame1)
        self.Button3.place(relx=0.63, rely=0.54, height=33, width=116)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#161668")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(takefocus="0")
        self.Button3.configure(text='''Theaters''')
        self.Button3.configure(command = openTheater)

        def openCast():
            c.vp_start_gui()

        self.Button4 = Button(self.Frame1)
        self.Button4.place(relx=0.71, rely=0.54, height=33, width=106)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#161668")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#ffffff")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(takefocus="0")
        self.Button4.configure(text='''Cast''')
        self.Button4.configure(command = openCast)
    
        def openCustomer():
            m.vp_start_gui()
    
    
        self.Button5 = Button(self.Frame1)
        self.Button5.place(relx=0.78, rely=0.54, height=33, width=106)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#161668")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#ffffff")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(takefocus="0")
        self.Button5.configure(text='''Customer''')
        self.Button5.configure(command = openCustomer)

        def openEmployee():
            e.vp_start_gui()
        
        self.Button6 = Button(self.Frame1)
        self.Button6.place(relx=0.86, rely=0.54, height=33, width=96)
        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#161668")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="#ffffff")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(pady="0")
        self.Button6.configure(takefocus="0")
        self.Button6.configure(text='''Employees''')
        self.Button6.configure(command = openEmployee)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.0, rely=0.2, relheight=0.58, relwidth=1.0)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#ffffff")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.Frame2.configure(width=1915)

        self.Scrolledlistbox1 = ScrolledListBox(self.Frame2)
        self.Scrolledlistbox1.place(relx=0.27, rely=0.34, relheight=0.35
                , relwidth=0.48)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")
        self.Scrolledlistbox1.configure(takefocus="0")
        self.Scrolledlistbox1.configure(width=10)

        self.Label1 = Label(self.Frame2)
        self.Label1.place(relx=0.45, rely=0.05, height=36, width=262)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffeee0")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#333333")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Enter direct queries here''')

        self.Entry1 = Entry(self.Frame2)
        self.Entry1.place(relx=0.27, rely=0.21,height=54, relwidth=0.48)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(takefocus="0")
        entry = self.Entry1.configure(textvariable=ment)
        
        def getText():
            
           var1 =  iq.InsertQuries.directInsert(ment)
           i = 0;
           for row in var1:
            
            self.Scrolledlistbox1.insert('end', row)
            i = i + 1
           return

        self.Button7 = Button(self.Frame2)
        self.Button7.place(relx=0.7, rely=0.75, height=33, width=86)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#fff9f0")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(takefocus="0")
        self.Button7.configure(text='''Enter''')
        self.Button7.configure(width=86)
        self.Button7.configure(command = getText)
        

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.0, rely=0.79, relheight=0.21, relwidth=1.0)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(background="#0a0a0a")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")
        self.Frame3.configure(width=1915)

        self.Label2 = Label(self.Frame3)
        self.Label2.place(relx=0.24, rely=0.05, height=26, width=212)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#000000")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Made by:''')

        self.Label3 = Label(self.Frame3)
        self.Label3.place(relx=0.28, rely=0.19, height=26, width=272)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#000000")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Syed Myuhammad Mehdi Raza Abidi''')

        self.Label4 = Label(self.Frame3)
        self.Label4.place(relx=0.27, rely=0.37, height=26, width=272)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#000000")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#ffffff")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Hammad Hassan Khan''')

        self.Label5 = Label(self.Frame3)
        self.Label5.place(relx=0.27, rely=0.56, height=26, width=282)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#000000")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#ffffff")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Saifullah Alam''')

        self.Label6 = Label(self.Frame3)
        self.Label6.place(relx=0.44, rely=0.19, height=26, width=252)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#000000")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#ffffff")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Ahtisham Alam''')

        self.Label7 = Label(self.Frame3)
        self.Label7.place(relx=0.44, rely=0.37, height=26, width=252)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#000000")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#ffffff")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Umer Dhillo''')





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



